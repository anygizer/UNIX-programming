/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package imy.lnu.ds.unix;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mcangel
 */
public class CopyDTMainFrame extends javax.swing.JFrame
{
	JFileChooser jfc;
	
	/**
	 * Creates new form CopyDTMainFrame
	 */
	public CopyDTMainFrame()
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sourceDirectoryPathTextField = new javax.swing.JTextField();
        targetDirectoryPathTextField = new javax.swing.JTextField();
        chooseSourceDirectoryButton = new javax.swing.JButton();
        chooseTargetDirectoryButton = new javax.swing.JButton();
        copyDirectoryTreeButton = new javax.swing.JButton();
        clearTargetDirectoryCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Copy directory tree");
        setMaximumSize(new java.awt.Dimension(330, 123));
        setMinimumSize(new java.awt.Dimension(330, 123));
        setResizable(false);

        jLabel1.setText("From:");

        jLabel2.setText("To:");

        chooseSourceDirectoryButton.setText("Browse...");
        chooseSourceDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSourceDirectoryButtonActionPerformed(evt);
            }
        });

        chooseTargetDirectoryButton.setText("Browse...");
        chooseTargetDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseTargetDirectoryButtonActionPerformed(evt);
            }
        });

        copyDirectoryTreeButton.setText("Copy");
        copyDirectoryTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyDirectoryTreeButtonActionPerformed(evt);
            }
        });

        clearTargetDirectoryCheckBox.setText("Clear target directory");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceDirectoryPathTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearTargetDirectoryCheckBox)
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addComponent(targetDirectoryPathTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooseSourceDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooseTargetDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(copyDirectoryTreeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sourceDirectoryPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseSourceDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(targetDirectoryPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseTargetDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copyDirectoryTreeButton)
                    .addComponent(clearTargetDirectoryCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void initFileChooser()
	{
		jfc = new JFileChooser();
		jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//		jfc.setFileFilter(new FileFilter()
//		{
//			@Override
//			public boolean accept(File f)
//			{
//				if (f.isDirectory())
//				{
//					return true;
//				}
//				return false;
//			}
//
//			@Override
//			public String getDescription()
//			{
//				return "Directory filter.";
//			}
//		});
	}
	
	private void chooseSourceDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseSourceDirectoryButtonActionPerformed
	{//GEN-HEADEREND:event_chooseSourceDirectoryButtonActionPerformed
		if(jfc == null)
		{
			initFileChooser();
		}
		jfc.setCurrentDirectory(new File(sourceDirectoryPathTextField.getText()));
		if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			sourceDirectoryPathTextField.setText(jfc.getSelectedFile().getAbsolutePath());
		}
	}//GEN-LAST:event_chooseSourceDirectoryButtonActionPerformed

	private void chooseTargetDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseTargetDirectoryButtonActionPerformed
	{//GEN-HEADEREND:event_chooseTargetDirectoryButtonActionPerformed
		if (jfc == null)
		{
			initFileChooser();
		}
		jfc.setCurrentDirectory(new File(targetDirectoryPathTextField.getText()));
		if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			targetDirectoryPathTextField.setText(jfc.getSelectedFile().getAbsolutePath());
		}
	}//GEN-LAST:event_chooseTargetDirectoryButtonActionPerformed

	private void copyDirectoryTreeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyDirectoryTreeButtonActionPerformed
	{//GEN-HEADEREND:event_copyDirectoryTreeButtonActionPerformed
		try
		{
			Path targetDir = FileSystems.getDefault().getPath(
					targetDirectoryPathTextField.getText());
			if(clearTargetDirectoryCheckBox.isSelected())
			{
				CopyDT.clearDir(targetDir);
			}
			
			CopyDT.cpdirtree(FileSystems.getDefault().getPath(
					sourceDirectoryPathTextField.getText()), targetDir);
			JOptionPane.showMessageDialog(this, "Done.");
		} catch (IOException ex)
		{
			Logger.getLogger(CopyDTMainFrame.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(this, ex.getLocalizedMessage());
		}
	}//GEN-LAST:event_copyDirectoryTreeButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/*
		 * Set the Nimbus look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(CopyDTMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				new CopyDTMainFrame().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseSourceDirectoryButton;
    private javax.swing.JButton chooseTargetDirectoryButton;
    private javax.swing.JCheckBox clearTargetDirectoryCheckBox;
    private javax.swing.JButton copyDirectoryTreeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField sourceDirectoryPathTextField;
    private javax.swing.JTextField targetDirectoryPathTextField;
    // End of variables declaration//GEN-END:variables
}
